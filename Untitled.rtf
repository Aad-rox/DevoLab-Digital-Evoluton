{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \uc0\u65056 9d5e47bb-888e-467d-a7c5-4ccb397fa18a\u65056 \
def setup():\
    user_p = Integer(input("Enter a prime number for p, or type 0 to get an autogenerated prime number: "))\
    if user_p == 0:\
        p = Integer(next_prime(randint(129, 2561)))\
        print("Here is your prime number:", p)\
    else:\
        p = Integer(user_p)\
    user_g = Integer(input(f"Enter a primitive root g (mod \{p\}), or type 1 to get an autogenerated value: "))\
    if user_g == 1:\
        g = Integer(primitive_root(p))\
    else:\
        g = Integer(user_g)\
    x = Integer(input(f"Choose x such that 0 <= x <= \{p-2\}: "))\
    h = power_mod(g, x, p)\
    return p, g, x, h\
\
def output(p, g, h):\
    underline_text("Public Information:")\
    print('Prime "p": ' + str(p))\
    print('Primitive Root "g": ' + str(g))\
    print('g^x mod p = "h": ' + str(h))\
\
    underline_text("Private Information:")\
    print('x: ' + str(x))\
    print("Erm this is private, why are you looking at this???")\
\
def Encrypt(message, p, g, h):\
    modulus = p\
    y = randint(0, p - 2)\
    g_raised_to_y = power_mod(g, y, modulus)\
    shared_secret = power_mod(h, y, modulus)\
    encrypted_characters = []\
    for char in message:\
        ord_val = ord(char)\
        encrypted_character_value = (ord_val * shared_secret) % modulus\
        encrypted_characters.append(encrypted_character_value)\
\
    return g_raised_to_y, encrypted_characters\
\
\
def Decrypt(g_raised_to_y, encrypted_characters, p, x):\
    modulus = p\
    shared_secret = power_mod(g_raised_to_y, x, modulus)\
    decrypted_message = ""\
    for encrypted_char in encrypted_characters:\
        original_ord_val = (encrypted_char * power_mod(shared_secret, -1, modulus)) % modulus\
        decrypted_message += chr(original_ord_val)\
    return decrypted_message\
\
def underline_text(text):\
    underline = '\\u0332'\
    underline_text = ''.join([ch + underline if ch != ' ' and ch != ':' else ch for ch in text])\
    print(underline_text)\
\
p, g, x, h = setup()\
output(p, g, h)\
\
message = str(input("enter a message: "))\
g_raised_to_y, encrypted_characters = Encrypt(message, p, g, h)\
\
print("\\nEncrypted Message:")\
print("g^y mod p:", g_raised_to_y)\
print("Encrypted Characters:", encrypted_characters)\
\
decrypted_message = Decrypt(g_raised_to_y, encrypted_characters, p, x)\
print("\\nDecrypted Message:")\
print(decrypted_message)}